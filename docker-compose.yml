version: "3.4"

services:
  gateway:
    container_name: gateway
    image: nginx:1.22.0-alpine
    build:
      context: ./gateway
    volumes:
      - ./gateway/_nginx.conf:/etc/nginx/_nginx.conf
      - ./gateway/ssl:/etc/nginx/ssl
    restart: always
    ports:
      - 80:80
      - 443:443
    networks:
      - backend
      - frontend
    environment:
      NGINX_PUBLIC_IP: ${NGINX_PUBLIC_IP}
      API_DOMAIN: ${API_DOMAIN}
      FRONT_DOMAIN: ${FRONT_DOMAIN}
    command: sh -c "envsubst '$$NGINX_PUBLIC_IP $$API_DOMAIN $$FRONT_DOMAIN' < /etc/nginx/_nginx.conf > /etc/nginx/nginx.conf && exec nginx -g 'daemon off;'"
    depends_on:
      - db
      - api
      - frontend
  db:
    container_name: postgres_db
## user: root
    image: postgres:14.3
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      PGDATA: /var/lib/postgresql/data/${DB_DIR}
    volumes:
      - ./db/${DB_DIR}:/var/lib/postgresql/data/${DB_DIR}
## port to access from localhost during development (insecured)
    ports:
      - ${DB_HOST_PORT}:5432
    restart: always

    networks:
      - backend
  api:
    container_name: api
    build:
      context: ./api
    image: api:1
    working_dir: /app
## command to keep the container on for remote development
#    command: bash -c "tail -f /dev/null"
    command: bash -c "uvicorn main:app --host 0.0.0.0 --port 8000 --reload" #
    environment:
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}
      API_SECRET_KEY: ${API_SECRET_KEY}
    volumes:
      - ./api:/app
## port to access from localhost during development (insecured)
    ports:
      - ${API_HOST_PORT}:8000
    depends_on:
      - db
    restart: always
    networks:
      - backend

  frontend:
    container_name: front
    image: node:16
    working_dir: /app
#    command: bash -c "tail -f /dev/null"
    command: bash -c "npm run build; npm install -g serve; serve -s build"
    environment:
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}
      API_SECRET_KEY: ${API_SECRET_KEY}
    volumes:
      - ./front:/app
## port to access from localhost during development (insecured)
    ports:
      - ${FRONT_HOST_PORT}:3000
    depends_on:
      - db
      - api
    restart: always
    networks:
      - frontend
      - backend


networks:
  backend:
  frontend: